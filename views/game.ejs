<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ping Png</title>


</head>

<body>

    <!-- <script defer src="script.js"></script> -->
    <canvas id="ping" width="600" height="400"></canvas>

    <style>
        body {
            background-color: #ccffff;
            margin-left: 20;
        }

        #ping {
            border: solid 2px black;
            position: relative;
            margin-top: 10%;
            margin-left: 20%;
            margin-bottom: 50%;
            margin-right: 30%;
        }
    </style>

    <script>
        const canvas = document.getElementById("ping");
        const ctx = canvas.getContext('2d');
        const pname = '<%=name%>'



        const user1 = {
            x: 0, // left side of canvas
            y: (canvas.height - 100) / 2,
            width: 10,
            height: 100,
            score: 0,
            color: "BLACK"
        }

        const ball = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            radius: 10,
            velocityX: 5,
            velocityY: 5,
            speed: 7,
            color: "WHITE"
        }

        const user2 = {
            x: canvas.width - 10,
            y: (canvas.height - 100) / 2,
            width: 10,
            height: 100,
            score: 0,
            color: "BLACK"
        }

        const net = {
            x: (canvas.width - 2) / 2,
            y: 0,
            height: 10,
            width: 2,
            color: "WHITE"
        }

        function drawRect(x, y, w, h, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x, y, w, h);
        }

        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.velocityX = -ball.velocityX;
            ball.speed = 7;
        }

        canvas.addEventListener("mousemove", getMousePos);

        function getMousePos(evt) {
            let rect = canvas.getBoundingClientRect();

            user1.y = evt.clientY - rect.top - user1.height / 2;
        }

        function drawArc(x, y, r, color) {
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.arc(x, y, r, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
        }
        function drawText(text, x, y) {
            ctx.fillStyle = "#0099cc";
            ctx.font = "40px fantasy";
            ctx.fillText(text, x, y);
        }

        function drawRect(x, y, w, h, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x, y, w, h);
        }

        function drawNet() {
            for (let i = 0; i <= canvas.height; i += 15) {
                drawRect(net.x, net.y + i, net.width, net.height, net.color);
            }
        }

        function collision(b, p) {
            p.top = p.y;
            p.bottom = p.y + p.height;
            p.left = p.x;
            p.right = p.x + p.width;

            b.top = b.y - b.radius;
            b.bottom = b.y + b.radius;
            b.left = b.x - b.radius;
            b.right = b.x + b.radius;

            return p.left < b.right && p.top < b.bottom && p.right > b.left && p.bottom > b.top;
        }

        function update() {

            // change the score of players, if the ball goes to the left "ball.x<0" computer win, else if "ball.x > canvas.width" the user win
            if (ball.x - ball.radius < 0) {
                user2.score++;
                // comScore.play();
                resetBall();
            } else if (ball.x + ball.radius > canvas.width) {
                user1.score++;
                // userScore.play();
                resetBall();
            }

            // the ball has a velocity
            ball.x += ball.velocityX;
            ball.y += ball.velocityY;

            // computer plays for itself, and we must be able to beat it
            // simple AI
            user2.y += ((ball.y - (user2.y + user2.height / 2))) * 0.1;

            // when the ball collides with bottom and top walls we inverse the y velocity.
            if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height) {
                ball.velocityY = -ball.velocityY;
                // wall.play();
            }

            // we check if the paddle hit the user or the com paddle
            let player = (ball.x + ball.radius < canvas.width / 2) ? user1 : user2;

            // if the ball hits a paddle
            if (collision(ball, player)) {
                // play sound
                // hit.play();
                // we check where the ball hits the paddle
                let collidePoint = (ball.y - (player.y + player.height / 2));
                // normalize the value of collidePoint, we need to get numbers between -1 and 1.
                // -player.height/2 < collide Point < player.height/2
                collidePoint = collidePoint / (player.height / 2);

                // when the ball hits the top of a paddle we want the ball, to take a -45degees angle
                // when the ball hits the center of the paddle we want the ball to take a 0degrees angle
                // when the ball hits the bottom of the paddle we want the ball to take a 45degrees
                // Math.PI/4 = 45degrees
                let angleRad = (Math.PI / 4) * collidePoint;

                // change the X and Y velocity direction
                let direction = (ball.x + ball.radius < canvas.width / 2) ? 1 : -1;
                ball.velocityX = direction * ball.speed * Math.cos(angleRad);
                ball.velocityY = ball.speed * Math.sin(angleRad);

                // speed up the ball everytime a paddle hits it.
                ball.speed += 0.1;
            }
        }



        function render() {
            drawRect(0, 0, canvas.width, canvas.height, "#00ff00");

            drawRect(user1.x, user1.y, user1.width, user1.height, user1.color);

            drawRect(user2.x, user2.y, user2.width, user2.height, user2.color);

            drawNet();

            drawArc(ball.x, ball.y, ball.radius, ball.color);

            drawText(pname + " " + user1.score, canvas.width / 4, canvas.height / 5);


            drawText(`JARVIS ${user2.score}`, 0.6 * canvas.width, canvas.height / 5);
        }


        function game() {
            update();
            render();
        }
        let framePerSecond = 50;
        let loop = setInterval(game, 1000 / framePerSecond);
    </script>


</body>

</html>